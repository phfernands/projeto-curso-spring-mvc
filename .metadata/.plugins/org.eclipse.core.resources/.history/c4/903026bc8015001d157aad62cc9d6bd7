package br.com.alura.mvc.mudi;

import javax.sql.DataSource;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.provisioning.InMemoryUserDetailsManager;
import org.springframework.security.web.SecurityFilterChain;


@Configuration
@EnableWebSecurity
public class WebSecurityConfig extends WebSecurityConfigurerAdapter{
	
	private DataSource dataSource;
	
    @Override
    protected void configure(HttpSecurity http) throws Exception {
    	http
    	.authorizeRequests()
    		.anyRequest().authenticated()
    	.and()
    	.formLogin(form -> form
    			.loginPage("/login")
    			.permitAll())
    	.logout(logout -> logout.logoutUrl("/logout"));
    	
    }
    
    protected void configure(AuthenticationManagerBuilder auth) {
    	BCryptPasswordEncoder encoder =  new BCryptPasswordEncoder();
    	
    	UserDetails user = User.builder()
    			.username("paulo")
    			.password(encoder.enconde("paulo"))
    			.roles("ADM")
    			.build();
    	
    	auth.jdbcAuthentication()
    		.dataSource(dataSource)
    		.passwordEncoder(encoder);
    		.with()
    }

    @Bean
    @Override
    public InMemoryUserDetailsManager userDetailsService() {
    	UserDetails user = User.withDefaultPasswordEncoder()
    			.username("paulo")
    			.password("paulo")
    			.roles("ADM")
    			.build();
    	return new InMemoryUserDetailsManager(user);
    }
}
